name: Build & Deploy Laravel ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  CLUSTER_NAME: laravel-fargate-cluster
  SERVICE_NAME: laravel-app-service

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push PHP-FPM image
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        PHP_IMAGE=${{ secrets.ECR_REGISTRY }}/laravel-php-fpm:$IMAGE_TAG
        echo "Building PHP-FPM image $PHP_IMAGE..."
        docker build -t $PHP_IMAGE -f Dockerfile.php-fpm .
        docker push $PHP_IMAGE
        echo "PHP_IMAGE=$PHP_IMAGE" >> $GITHUB_ENV

    - name: Build & push Nginx image
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        NGINX_IMAGE=${{ secrets.ECR_REGISTRY }}/laravel-nginx:$IMAGE_TAG
        echo "Building Nginx image $NGINX_IMAGE..."
        docker build -t $NGINX_IMAGE -f Dockerfile.nginx .
        docker push $NGINX_IMAGE
        echo "NGINX_IMAGE=$NGINX_IMAGE" >> $GITHUB_ENV

    - name: Prepare ECS task definition
      run: |
        echo "Using images:"
        echo "PHP: $PHP_IMAGE"
        echo "NGINX: $NGINX_IMAGE"

        jq --arg php "$PHP_IMAGE" --arg nginx "$NGINX_IMAGE" --arg exec "$EXEC_ROLE_ARN" \
          '.containerDefinitions[0].image=$php |
           .containerDefinitions[1].image=$nginx |
           .executionRoleArn=$exec' \
          infra/task-def-templates/app-taskdef.json > infra/taskdef.json
      env:
        EXEC_ROLE_ARN: ${{ secrets.EXEC_ROLE_ARN }}

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://infra/taskdef.json > /tmp/td.json
        cat /tmp/td.json

    - name: Update ECS service (force new deployment)
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.SERVICE_NAME }} \
          --force-new-deployment
