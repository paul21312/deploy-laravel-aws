name: Build & Deploy Laravel ECS

on:
  push:
    branches: [ main ]

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: 372836560826.dkr.ecr.ap-southeast-2.amazonaws.com/laravel-fargate-app
  CLUSTER_NAME: laravel-fargate-cluster
  SERVICE_NAME: laravel-app-service

permissions:
  contents: read
  id-token: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build & push image
      run: |
        IMAGE_TAG=${GITHUB_SHA::8}
        IMAGE_URI=${{ secrets.ECR_REGISTRY }}:$IMAGE_TAG
        echo "Building Docker image $IMAGE_URI..."
        docker build -t $IMAGE_URI -f docker/Dockerfile .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Prepare ECS task definition
      run: |
        echo "Using image URI: $IMAGE_URI"
        jq --arg img "$IMAGE_URI" --arg exec "$EXEC_ROLE_ARN" \
          '.containerDefinitions[0].image=$img | .executionRoleArn=$exec' \
          infra/task-def-templates/app-taskdef.json > infra/taskdef.json
      env:
        EXEC_ROLE_ARN: ${{ secrets.EXEC_ROLE_ARN }}

    - name: Register ECS task definition
      run: |
        aws ecs register-task-definition --cli-input-json file://infra/taskdef.json > /tmp/td.json
        cat /tmp/td.json

    - name: Update ECS service (force new deployment)
      run: |
        aws ecs update-service \
          --cluster ${{ env.CLUSTER_NAME }} \
          --service ${{ env.SERVICE_NAME }} \
          --force-new-deployment
